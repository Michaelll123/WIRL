<CurrentEdit>
<prefix>	 *  @param  targetAngle destination angle
	 *  @return +1 for clockwise, -1 for counter-clockwise
	 *  @use    {@code var direction = MathUtil.getRadiansDirectionToTarget( 90, 180 );}
	 */
	public static float getRadiansDirectionToTarget( float curRadians, float targetRadians ) {
		while(curRadians < P.TWO_PI) curRadians += P.TWO_PI;
		while(targetRadians < P.TWO_PI) targetRadians += P.TWO_PI;
		float rotDiff = curRadians - targetRadians;
		while(rotDiff < 0) rotDiff += P.TWO_PI;
		if(rotDiff < P.PI) return -1;
		else return 1;
	};
	
	// from: https://stackoverflow.com/a/2007279
	public static float getRadiansDiff(float radians1, float radians2) {
</prefix>
<before>		return atan2(sin(x-y), cos(x-y));
</before>
<after></after>
<suffix>	};

	public static float averageOfThree( float one, float two, float three ) {
		return (one + two + three) / 3f;
	}
	
	public static float averageOfFour( float one, float two, float three, float four ) {
		return (one + two + three + four) / 4f;
	}
	
	public static Point triangleCenter = new Point(0,0);
	public static Point computeTriangleCenter( float x1, float y1, float x2, float y2, float x3, float y3 ) {
		triangleCenter.setLocation( averageOfThree( x1, x2, x3 ), averageOfThree( y1, y2, y3 ) );
		return triangleCenter;
</suffix>
</CurrentEdit>
<CtxEdits>
<Edit>
<prefix>	 *  @param  targetAngle destination angle
	 *  @return +1 for clockwise, -1 for counter-clockwise
	 *  @use    {@code var direction = MathUtil.getRadiansDirectionToTarget( 90, 180 );}
	 */
	public static float getRadiansDirectionToTarget( float curRadians, float targetRadians ) {
		while(curRadians < P.TWO_PI) curRadians += P.TWO_PI;
		while(targetRadians < P.TWO_PI) targetRadians += P.TWO_PI;
		float rotDiff = curRadians - targetRadians;
		while(rotDiff < 0) rotDiff += P.TWO_PI;
		if(rotDiff < P.PI) return -1;
		else return 1;
	};
	
	// from: https://stackoverflow.com/a/2007279
	public static float getRadiansDiff(float radians1, float radians2) {
</prefix>
<before></before>
<after>		return atan2(sin(x-y), cos(x-y));
</after>
<suffix>	};

	public static float averageOfThree( float one, float two, float three ) {
		return (one + two + three) / 3f;
	}
	
	public static float averageOfFour( float one, float two, float three, float four ) {
		return (one + two + three + four) / 4f;
	}
	
	public static Point triangleCenter = new Point(0,0);
	public static Point computeTriangleCenter( float x1, float y1, float x2, float y2, float x3, float y3 ) {
		triangleCenter.setLocation( averageOfThree( x1, x2, x3 ), averageOfThree( y1, y2, y3 ) );
		return triangleCenter;
</suffix>
</Edit>
</CtxEdits>
