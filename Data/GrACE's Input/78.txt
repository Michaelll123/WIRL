<CurrentEdit>
<prefix>		try {
			legacyMakelangeloPreferenceNode.sync();
		} catch (BackingStoreException e) {
			Log.error(e.getMessage());
		}
		//initialMap.put(MAKELANGELO_ROOT, makelangeloPreferenceNode);
		initialMap.put(MakelangeloPreferenceKey.LEGACY_MAKELANGELO_ROOT, legacyMakelangeloPreferenceNode);
		initialMap.put(MakelangeloPreferenceKey.GRAPHICS, legacyMakelangeloPreferenceNode.node(GRAPHICS_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.MACHINES, legacyMakelangeloPreferenceNode.node(MACHINES_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.LANGUAGE, legacyMakelangeloPreferenceNode.node(LANGUAGE_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.SOUND, legacyMakelangeloPreferenceNode.node(SOUND_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.METRICS, legacyMakelangeloPreferenceNode.node(METRICS_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.FILE, legacyMakelangeloPreferenceNode.node(FILE_PATH_NAME));
		@SuppressWarnings("unchecked")
		final Map<? extends MakelangeloPreferenceKey, ? extends Preferences> castedMap = (Map<? extends MakelangeloPreferenceKey, ? extends Preferences>) initialMap;
</prefix>
<before>		CLASS_TO_PREFERENCE_NODE_MAP = Collections.unmodifiableMap(aMap);
</before>
<after></after>
<suffix>	}

	/**
	 * NOOP Constructor.
	 *
	 * @throws IllegalStateException
	 */
	private PreferencesHelper() throws IllegalStateException {
		throw new IllegalStateException();
	}

	/**
	 * @param key enumeration key used to look up a Makelangelo preference value.
	 * @return preference node associated with the given key.
</suffix>
</CurrentEdit>
<CtxEdits>
<Edit>
<prefix>		try {
			legacyMakelangeloPreferenceNode.sync();
		} catch (BackingStoreException e) {
			Log.error(e.getMessage());
		}
		//initialMap.put(MAKELANGELO_ROOT, makelangeloPreferenceNode);
		initialMap.put(MakelangeloPreferenceKey.LEGACY_MAKELANGELO_ROOT, legacyMakelangeloPreferenceNode);
		initialMap.put(MakelangeloPreferenceKey.GRAPHICS, legacyMakelangeloPreferenceNode.node(GRAPHICS_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.MACHINES, legacyMakelangeloPreferenceNode.node(MACHINES_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.LANGUAGE, legacyMakelangeloPreferenceNode.node(LANGUAGE_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.SOUND, legacyMakelangeloPreferenceNode.node(SOUND_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.METRICS, legacyMakelangeloPreferenceNode.node(METRICS_PATH_NAME));
		initialMap.put(MakelangeloPreferenceKey.FILE, legacyMakelangeloPreferenceNode.node(FILE_PATH_NAME));
		@SuppressWarnings("unchecked")
		final Map<? extends MakelangeloPreferenceKey, ? extends Preferences> castedMap = (Map<? extends MakelangeloPreferenceKey, ? extends Preferences>) initialMap;
</prefix>
<before></before>
<after>		CLASS_TO_PREFERENCE_NODE_MAP = Collections.unmodifiableMap(aMap);
</after>
<suffix>	}

	/**
	 * NOOP Constructor.
	 *
	 * @throws IllegalStateException
	 */
	private PreferencesHelper() throws IllegalStateException {
		throw new IllegalStateException();
	}

	/**
	 * @param key enumeration key used to look up a Makelangelo preference value.
	 * @return preference node associated with the given key.
</suffix>
</Edit>
</CtxEdits>
