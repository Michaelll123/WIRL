0###path###myPath.toString()###2.246###2842###19
1###combox###waypointSymTxt###3.048###4749###20
2###dirName###myPath.toString()###6.414###2569###20
3###event, lineChart###e, this###5.372###3749###21
4###primaryStage###myStage###5.803###1337###18
5###box, lv###waypointSymTxt, waypointSymTxt###5.979###5061###25
6###cboPersons, Person###waypointSymTxt, Label###10.677###4770###25
7###Error
8###Error
9###Error
10###Error
11###Error
12###Error
13###Error
14###Error
15###Error
16###Error
17###Error
18###Matcher m = Pattern.compile("your regular expression here")###Matcher m = postReferencePattern.matcher(post.text)###12.033###1380###35
19###OutputStreamWriter outputStreamWriter = new OutputStreamWriter(context.openFileOutput("config.txt", Context.MODE_PRIVATE))###OutputStreamWriter outputStreamWriter = new OutputStreamWriter(context.openFileOutput(escapePathSeparator(name), Context.MODE_PRIVATE))###12.119###1514###56
20###gray = 0.299 * red + 0.587 * green + 0.114 * blue###bc = (int) (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue())###12.911###1245###70
21###CMSSignedData cms = new CMSSignedData(new CMSProcessableByteArray(Data_Bytes), Sig_Bytes)###CMSSignedData cms = new CMSSignedData(signedContent, contents.getBytes())###6.949###1276###56
22###CMSSignedData signedData = new CMSSignedData(Base64.decode(envelopedData.getBytes()))###CMSSignedData signedData = new CMSSignedData(contents.getBytes())###3.722###1868###50
23###CMSSignedData cms = new CMSSignedData(new CMSProcessableByteArray(Data_Bytes), Sig_Bytes)###CMSSignedData cms = new CMSSignedData(new CMSProcessableByteArray(buf), contents.getBytes())###4.522###2026###59
24###double xmagic = xrad * magic###double xmagic = r * Math.cos(Math.PI / 4)###5.798###3481###36
25###int w = image.getWidth(), int h = image.getHeight(), for(int y = 0; y < h; y++) {, for(int x = 0; x < w; x++) {, int pixel = image.getRGB(x, y)###int w = newImage.getWidth(), int h = newImage.getHeight(), for(int y = 0; y < h; y++) {, for(int x = 0; x < w; x++) {, int pixel = newImage.getRGB(x, y)###9.729###3379###121
26###sizeProduct*=size[k]###sizeProduct*=(int)sizeValues[k]###8.506###4128###29
27###transformer.transform(xmlInput, xmlOutput)###transformer.transform(domSource, streamResult)###5.323###627###32
28###double xmagic = xrad * magic###double xmagic = r * Math.cos(Math.PI / 4)###5.53###1679###36
29###con = new URL( url ).openConnection()###con = new URL(doiRequest).openConnection()###6.228###667###35
30###java.awt.Image tmp = img.getScaledInstance(newW, newH, Image.SCALE_SMOOTH), BufferedImage dimg = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB)###java.awt.Image tmp = img.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH), BufferedImage dimg = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB)###6.053###384###92
31###myControlXML###actual###2.275###799###18
32###url1, user, password###properties.getUrl(), properties.getUser(), properties.getPassword()###3.006###586###29
33###width, height###getWidth(), getHeight()###2.281###1396###21
34###URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), encoding)###URLDecoder.decode(pair.substring(0, idx), encoding), URLDecoder.decode(pair.substring(idx + 1), encoding)###5.572###2971###65
35###portNr, portFree###port, free###2.679###254###22
36###upperLimit, randomSource###limit, rand###5.672###4736###22
37###start, end###var0, var1###5.988###1487###22
38###title, text###view, result###4.568###715###20
39###txtSpecialRequests, lastSpecialRequestsCursorPosition, specialRequests###editText, lastCursorPosition, currentText###5.27###1161###33
40###tv, TAG###txtMessage, getClass().getSimpleName()###4.094###2320###24
41###selectedUri###dirUri###7.925###9493###18
42###Error
43###mStringFilterList###originalFileEntries###5.147###901###21
44###chars, bytes###charBuffer.array(), byteBuffer.array()###7.843###1401###25
45###bundle###b###6.651###641###16
46###mainToolbar, activity, checker###main.getActivity().findViewById(R.id.toolbar), main.getActivity(), this###3.947###1141###32
47###x, y###radians1, radians2###7.238###4242###23
48###http://example.com/image.jpg, C:/File/To/Save/To/image.jpg###fileURL, localPath###5.226###411###37
49###a, b###command, args###3.443###425###20
50###list, target###listView, mCommentListPosition###3.256###2029###24
51###mImageLoader###imageLoader###4.746###5661###19
52###ac[j]###result[j]###3.673###1145###20
53###bi.getColorModel()###img.getColorModel()###6.911###3021###22
54###b.getGraphics()###result.getGraphics()###8.408###3722###22
55###mLinearLayout###newLv###7.86###1514###18
56###mLinearLayout###newLv###6.012###1658###18
57###mLinearLayout###newLv###6.598###2180###18
58###url###urlString###7.657###1083###17
59###o.outHeight, o.outWidth, IMAGE_MAX_SIZE, stream###optBounds.outHeight, optBounds.outWidth, maxWidth, new ByteArrayOutputStream()###6.847###3677###42
60###list, target###listView, mCommentListPosition###7.011###2797###24
61###mImageLoader###imageLoader###5.6###6360###19
62###targetClass, target###method.getDeclaringClass(), proxy###5.621###1351###25
63###url, mimeType###urlString, MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension)###5.865###1083###32
64###o, IMAGE_MAX_SIZE, stream###optBounds, maxWidth, new ByteArrayOutputStream()###5.793###3715###29
65###mImageLoader###imageLoader###9.692###5661###19
66###list, target###listView, mCommentListPosition###5.065###2029###24
67###canvas, textPaint###target, mTextPaint###5.004###884###23
68###bmp###bitmap###4.923###1999###16
69###getContext###context###4.473###2001###16
70###getTheme, getResources###context.getTheme, context.getResources###3.782###748###24
71###o, IMAGE_MAX_SIZE, stream###optBounds, 1024, new ByteArrayOutputStream()###4.365###3715###31
72###oldUri###uri###7.158###4918###17
73###user, request.getReader###entity, jsonObject###7.355###2023###22
74###illegalChars###ILLEGAL_CHARS###4.822###463###19
75###url1, user, password###properties.getUrl(), properties.getUsername(), properties.getPassword()###7.295###550###29
76###list, String, string.isEmpty()###colors, ColorRGB, c.equals(iterator.next())###3.263###1237###31
77###mapA, mapB###expected, actual###2.746###2901###22
78###myMap, aMap###CLASS_TO_PREFERENCE_NODE_MAP, castedMap###3.804###2400###29
79###contextThemeWrapper, R.layout.yourLayout###mContext, R.layout.sdf_message###3.916###1818###31
80###themedContext###mContext###5.32###2100###19
81###gameState, ed, header###bundle, editor, EXTRA_HEADER###4.251###2772###26
82###context, tmf.getTrustManagers()###sslContext, trustAllCerts###6.952###2331###30
83###illegalChars###ILLEGAL_CHARS###5.305###463###19
84###url1, user, password###properties.getUrl(), properties.getUsername(), properties.getPassword()###3.575###550###29
85###b2, Question.class.getClassLoader()###bundleOut, DownloadRequest.class.getClassLoader()###4.305###756###31
86###mFragmentManager###fragmentManager###3.734###3169###18
87###not.contentView###notification.contentView###6.388###4469###18
88###sourceBitmap, width, height###bitmap, bitmap.getWidth(), bitmap.getHeight()###4.545###3269###28
89###uri.getPath()###fileName###4.834###924###18
90###UDPListenerService, handleMessage###AbstractUploaderService, handleIntent###8.925###4477###25
91###xmlInput, xmlOutput###domSource, streamResult###9.214###627###24
92###gray, red, green, blue###bc, color.getRed(), color.getGreen(), color.getBlue()###6.772###1245###35
93###x, y, pdfFile###20, 20, outputFile###3.711###1117###26
94###image, w, h###newImage, newImage.getWidth(), newImage.getHeight()###6.257###3379###30
95###encoding###Charset.defaultCharset()###5.616###3559###19
96###ap###source###6.222###856###16
97##is###gis###6.055###4097###0
98###ae, sourceDirectoryChooser###event, fc###4.292###857###25
99###string###text###2.935###857###25